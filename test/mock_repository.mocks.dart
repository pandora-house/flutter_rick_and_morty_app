// Mocks generated by Mockito 5.0.14 from annotations
// in flutter_rick_and_morty_app/test/mock_repository.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:flutter_rick_and_morty_app/data/models/character.dart' as _i2;
import 'package:flutter_rick_and_morty_app/data/models/episode.dart' as _i3;
import 'package:flutter_rick_and_morty_app/data/models/locations.dart' as _i4;
import 'package:flutter_rick_and_morty_app/data/repository.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeCharacter_0 extends _i1.Fake implements _i2.Character {}

class _FakeEpisode_1 extends _i1.Fake implements _i3.Episode {}

class _FakeLocations_2 extends _i1.Fake implements _i4.Locations {}

/// A class which mocks [Repository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRepository extends _i1.Mock implements _i5.Repository {
  MockRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i2.Character>> fetchCharacters(int? page) =>
      (super.noSuchMethod(Invocation.method(#fetchCharacters, [page]),
              returnValue: Future<List<_i2.Character>>.value(<_i2.Character>[]))
          as _i6.Future<List<_i2.Character>>);
  @override
  _i6.Future<_i2.Character> fetchPersonageById(int? id) =>
      (super.noSuchMethod(Invocation.method(#fetchPersonageById, [id]),
              returnValue: Future<_i2.Character>.value(_FakeCharacter_0()))
          as _i6.Future<_i2.Character>);
  @override
  _i6.Future<_i2.Character> fetchPersonageByUrl(String? url) =>
      (super.noSuchMethod(Invocation.method(#fetchPersonageByUrl, [url]),
              returnValue: Future<_i2.Character>.value(_FakeCharacter_0()))
          as _i6.Future<_i2.Character>);
  @override
  _i6.Future<List<_i3.Episode>> fetchEpisodesPage(int? page) =>
      (super.noSuchMethod(Invocation.method(#fetchEpisodesPage, [page]),
              returnValue: Future<List<_i3.Episode>>.value(<_i3.Episode>[]))
          as _i6.Future<List<_i3.Episode>>);
  @override
  _i6.Future<_i3.Episode> fetchEpisodeById(int? id) =>
      (super.noSuchMethod(Invocation.method(#fetchEpisodeById, [id]),
              returnValue: Future<_i3.Episode>.value(_FakeEpisode_1()))
          as _i6.Future<_i3.Episode>);
  @override
  _i6.Future<_i3.Episode> fetchEpisodeByUrl(String? url) =>
      (super.noSuchMethod(Invocation.method(#fetchEpisodeByUrl, [url]),
              returnValue: Future<_i3.Episode>.value(_FakeEpisode_1()))
          as _i6.Future<_i3.Episode>);
  @override
  _i6.Future<List<_i4.Locations>> fetchLocationsPage(int? page) =>
      (super.noSuchMethod(Invocation.method(#fetchLocationsPage, [page]),
              returnValue: Future<List<_i4.Locations>>.value(<_i4.Locations>[]))
          as _i6.Future<List<_i4.Locations>>);
  @override
  _i6.Future<_i4.Locations> fetchLocationById(int? id) =>
      (super.noSuchMethod(Invocation.method(#fetchLocationById, [id]),
              returnValue: Future<_i4.Locations>.value(_FakeLocations_2()))
          as _i6.Future<_i4.Locations>);
  @override
  _i6.Future<_i4.Locations> fetchLocationByUrl(String? url) =>
      (super.noSuchMethod(Invocation.method(#fetchLocationByUrl, [url]),
              returnValue: Future<_i4.Locations>.value(_FakeLocations_2()))
          as _i6.Future<_i4.Locations>);
  @override
  String toString() => super.toString();
}
